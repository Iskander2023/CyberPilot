//
//  AppConfig.swift
//  CyberPilot
//
//  Created by Aleksandr Chumakov on 24/06/25.
//
import SwiftUI



struct AppConfig {
    
    
    struct VideoView {
        static var systemName = "road.lane.arrowtriangle.2.inward"
        static let paddingTop: CGFloat = 16
        static let paddingLeading: CGFloat = 16
        static let ikonSize: CGFloat = 30
        static let foreground:Color = .black
    }
    
    
    struct SocketView {
        static let mainContentPadding: CGFloat = 100
        static let mainContentSpacing: CGFloat = 20
        
        static let webViewHeight: CGFloat = 350
        static let webViewPadding: CGFloat = 20
        
        static let connectionAddressFrame: CGFloat = 250
        
        
        static let connectButtonForegroundColor: Color = .white
        static let connectButtonBackgroundColor: Color = .blue
        static let connectButtonCornerRadius: CGFloat = 8
        
        static let disconnectButtonSystemName = "xmark.circle.fill"
        static let disconnectButtonFont: CGFloat = 35
        static let disconnectButtonForegroundColor: Color = .red
        
        static let connectionIndicatorTextSize: CGFloat = 16
        static let connectionIndicatorCircleWidth: CGFloat = 20
        static let connectionIndicatorCircleHeight: CGFloat = 20
        static let connectionIndicatorDisconnectColor: Color = .red
        static let connectionIndicatorConnectColor: Color = .green
        
        static let cameraButtonSystemName = "camera.fill"
        static let cameraButtonForegroundColor: Color = .black
        static let cameraButtonBackground: Color = .white
        static let cameraButtonOpacity: CGFloat = 0.8
        static let cameraButtonPaddingTop: CGFloat = 16
        static let cameraButtonPaddingLeading: CGFloat = 16
        
    }
    
    
    
    struct CommandSender {
        static let stopInterval = 0.5
        static let commandInterval = 0.2
    }
    
    
    struct DirectionArrow {
        static let arrowHeadLength: CGFloat = 15
        static let lineWidth: CGFloat = 4
        
    }
    
    struct DirectionLabels {
        static let width: CGFloat = 6
        static let height: CGFloat = 6
    }
    
    struct RoadView {
        static let roadWidth: CGFloat = 400
        static let lineHeight: CGFloat = 30
        static let segmentAngle: CGFloat = 0
        static let previousDegrees: CGFloat = 270
    }
    
    
    struct Perspective {
        static let planeDistance: CGFloat = 400
        static let horizontalAngleGrad: CGFloat = 145.8
        static let verticalAngleGrad: CGFloat = 122.6
        
    }
    
    struct ZonesOverlay {
        static let texyOffset: CGFloat = 3
        static let inputZoneName = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        static let newZoneName = "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        static let buttonSaveText = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        static let buttonCancelText = "–û—Ç–º–µ–Ω–∞"
        
    }
    
    struct MapGestureHandler {
        static let minScale: CGFloat = 0.5
        static let maxScale: CGFloat = 5
        static let lastScale: CGFloat = 1
    }
    
    struct MapButtons {
        static let initialScaleButton = "arrow.uturn.backward.circle"
        static let borderButton = "point.bottomleft.forward.to.point.topright.scurvepath"
        static let zoneButton = "square.on.square"
        static let deleteBorderButton = "eraser.line.dashed"
        static let spacing: CGFloat = 10
        static let opacity: CGFloat = 0.8
        static let mapLocation: CGFloat = 40
        static let scale: Double = 1.0
    }
    
    
    
    struct MapManagerMessage {
        static let loadingFromLocalFile = "‚úÖ –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
        static let theMapHasChanged = "üîÑ –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à"
        static let theMapHasNotChanged = "‚úÖ –ö–∞—Ä—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
        static let arrayDoesNotMatchMap = "‚ùå –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–∞—Ä—Ç—ã."
    }
    
    
    struct MapManager {
        static let socketIp: String = "ws://172.16.17.79:8765"
        static let noLocalIp: String = "http://192.168.0.201:8000/map.yaml" //var noLocalIp: String = "http://127.0.0.1:8000/map.yaml"
        static let mapUpdateTime: TimeInterval = 10
        static let resolution = 0.1
    }
    
    struct Cached {
        static let mapFilename = "cached_map.json"
        static let segmentsFilename = "cached_segments.json"
        
    }
    
    struct LineManager {
        static let socketIp = "ws://172.16.17.79:8765"
        
    }
    
    
    struct LineView {
        static let lineWidth: CGFloat = 2
        static let robotPositionwidth: CGFloat = 10 
        static let robotPositionheight: CGFloat = 10 
    }
    
    
    struct TouchController {
        static let maxSizeTach: CGFloat = 125
        static let maxSize: CGFloat = 250
        static let minSize: CGFloat = 100
        static let minLenghtPerspective: CGFloat = 50
        static let maxLenghtPerspective: CGFloat = 80
        static let updateTime = 0.2
        static let touchIndicatorSize: CGFloat = 100
        static let perspectiveLength: Int = 3
    }
    
    
    struct TouchPadGesture {
        static let minimumDistance: CGFloat = 5
    }
    
    struct TouchIndicator {
        static let color: Color = .blue
        static let opacity: Double = 0.2
        static let lineWidth: CGFloat = 2
        static let backgroundColorOpacity: CGFloat = 0.01
    }
    
    struct BorderLine {
        static let color: Color = .red
        static let lineWidth: CGFloat = 5
        static let dash: [CGFloat]? = [5]
    }
    
    
    struct PointSize {
        static let pointWidth: CGFloat = 10
        static let pointHeight: CGFloat = 10
        
    }
    
    struct UsersData {
        static let defaultUserName = "user"
        
    }
    
    struct Colors {
        static let primaryGreen = Color(red: 34/255, green: 177/255, blue: 76/255)
        static let inactiveGray = Color(red: 220/255, green: 220/255, blue: 220/255)
        static let errorRed = Color.red
        static let successGreen = Color.green
    }
    
    struct Addresses {
        static let serverAddress =  "ws://selekpann.tech:2000"
        static let localAddress = "robot3.local"
        static let userRegistrationUrl = "http://selekpann.tech:3000/register" // –∞–¥—Ä–µ—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        static let userLoginUrl = "http://selekpann.tech:3000/login" // –∞–¥—Ä–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        static let apiID = "5A5A737E-09E1-0492-ADD3-957B269669D8" // –∞–ø–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
    }
    
    struct PatternsForInput {
        static let emailPattern = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        static let passwordPattern = "[A-Z]"
        static let phoneNumberPattern = "^[0-9]+$"
        static let confirmationCodePattern = "[0-9]"
    }
    
    struct HttpMethods {
        static let postMethod = "POST"
        static let httpRequestHeader = "Content-Type"
        static let httpRequestValue = "application/json"
    }
    
    
    struct Strings {
        // —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        static let registrationTitle = "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
        static let registerButtonTitle = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        static let emailRus = "–ü–æ—á—Ç–∞"
        static let loginRus = "–õ–æ–≥–∏–Ω"
        static let EmailEng = "Email"
        static let min4Simbols = "–ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞"
        static let passwordRus = "–ü–∞—Ä–æ–ª—å"
        static let confirmPassword = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
        static let min8Simbols = "–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
        static let iconName = "lock.open"
        static let OneSymbolWithACapitalLetter = "–û–¥–∏–Ω —Å–∏–º–≤–æ–ª —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã"
        static let passwordMatch = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ"
        static let registrationStatusTrue = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
        static let registrationStatusFalse = "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        static let responseString = "No response data"
        static let alreadyRegistered = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        static let incorrectData =  "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        // –ª–æ–≥–∏–Ω
        static let enterData = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
        static let loginError = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"
        static let buttonOk = "Ok"
        static let dontHaveAccount = "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?"
        static let loginEntry = "–í—Ö–æ–¥"
        static let errorLoginMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        static let successfulLogin = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥"
        // —Ç–µ–ª–µ—Ñ–æ–Ω
        static let inputPhoneNumber = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        static let phoneNumberPrefix = "–ù–æ–º–µ—Ä +7"
        static let onlyNumbers = "—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        static let phoneNumbersCount = "10"
        static let sendPhoneNumber = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        //
        static let backButton = "< –ù–∞–∑–∞–¥"
        // –∫–∞–ø—á–∞
        static let charactersForCaptcha = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
        static let inputCaptchaText = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:"
        static let inputCaptcha = "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É"
        static let checkCaptcha = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        static let updateCaptcha = "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–ø—á—É"
        static let repeatIn = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑"
        // –∫–æ–¥
        static let enterReciverCode = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω—ã–π –∫–æ–¥"
        static let code = "–ö–æ–¥"
        static let codeLength = "4"
        static let incorrectCodeMessage = "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥"
        static let errorMessage = "–û—à–∏–±–∫–∞"
        static let confirm = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        
    }
    
    struct Requirements {
        static let minLoginLength = 4
        static let minPasswordLength = 8
    }
    
    struct Flags {
        static let isDebugMode = true
    }
}
