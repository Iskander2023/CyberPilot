//
//  IndoorMapEditor.swift
////  CyberPilot
////
////  Created by Aleksandr Chumakov on 7/05/25.
////
import Foundation
import Yams
import Combine

final class MapManager: ObservableObject {
    @Published var map: OccupancyGridMap?
    let mapCacheManager = GenericCacheManager<OccupancyGridMap>(filename: "cached_map.json")
    var authService: AuthService
    private var socketManager: SocketManager?
    private let logger = CustomLogger(logLevel: .info, includeMetadata: false)
    //private let cacheFilename = "cached_map.json"
    private let mapUpdateTime: TimeInterval = 10
    private var timerCancellable: AnyCancellable?
    var localIp: String = "http://127.0.0.1:8000/map.yaml"
    var socketIp: String = "ws://172.16.17.79:8765"
    var noLocalIp: String = "http://192.168.0.201:8000/map.yaml"
    var mapApdateTime: Double = 5
    
    
    
    init(authService: AuthService) {
        self.authService = authService
        map = mapCacheManager.load()
        socketManager = SocketManager(authService: authService)
    }
    
    
    func updateMap(with dataArray: [Int], len: Int,  completion: ((Bool) -> Void)? = nil) {
        let width = len
        let height = len
        let resolution = 0.1 // –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
        guard dataArray.count == width * height else {
            logger.info("‚ùå –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–∞—Ä—Ç—ã.")
            return
        }
        let newMap = OccupancyGridMap(width: width, height: height, resolution: resolution, data: dataArray)
        DispatchQueue.main.async {
            if self.map != newMap {
                self.logger.debug("üîÑ –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à")
                self.map = newMap
                self.mapCacheManager.save(newMap)
                completion?(true)
            } else {
                self.logger.debug("‚úÖ –ö–∞—Ä—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
                completion?(false)
            }
        }
    }
    
    func setupFromLocalFile() {
        logger.info("‚úÖ setupFromLocalFile –≤—ã–∑–≤–∞–Ω")
        downloadMapFromLocalFile(from: localIp)
        setupRefreshTimer()
    }
    
    
    func setupRefreshTimer() {
        timerCancellable?.cancel()
        timerCancellable = Timer
            .publish(every: mapApdateTime, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                guard let self = self else { return }
                self.downloadMapFromLocalFile(from: self.localIp)
            }
    }
    
    
    func startLoadingMap() {
        guard let socketManager = socketManager else { return }
        socketManager.connectSocket(urlString: socketIp)
        socketManager.onMapArrayReceived = { [weak self] array, len in
            self?.updateMap(with: array, len: len)
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in
            guard let self = self else { return }
            
            if !socketManager.isConnected {
                socketManager.disconnectSocket()
                self.logger.error("–°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
            } else {
                self.logger.info("–°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω")
            }
        }
    }
    
    func stopLoadingMap() {
        timerCancellable?.cancel()
        if let socketManager = socketManager, socketManager.isConnected {
            socketManager.disconnectSocket()
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω")
        } else {
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Å–æ–∫–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω)")
        }
    }
    
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏(–∏–∑ —Ñ–∞–π–ª–∞ yaml)
    func downloadMapFromLocalFile(from urlString: String, completion: ((Bool) -> Void)? = nil) {
        guard let url = URL(string: urlString) else {
            completion?(false)
            return
        }
        URLSession.shared.dataTask(with: url) { [weak self] data, _, _ in
            guard let self = self else { return }
            
            guard let data = data,
                  let string = String(data: data, encoding: .utf8),
                  let parsed = try? Yams.load(yaml: string) as? [String: Any],
                  let info = parsed["info"] as? [String: Any],
                  let width = info["width"] as? Int,
                  let height = info["height"] as? Int,
                  let resolution = info["resolution"] as? Double,
                  let data = info["data"] as? [Int] else {
                DispatchQueue.main.async {
                    completion?(false)
                }
                return
            }
            let newMap = OccupancyGridMap(width: width, height: height, resolution: resolution, data: data)
            DispatchQueue.main.async {
                if self.map != newMap {
                    self.logger.info("üîÑ –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à")
                    self.map = newMap
                    self.mapCacheManager.save(newMap)
                    completion?(true)
                } else {
                    self.logger.info("‚úÖ –ö–∞—Ä—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    completion?(false)
                }
            }
        }.resume()
    }
    
}
